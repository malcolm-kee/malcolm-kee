---
import type { GetStaticPaths } from 'astro';
import { CollectionEntry } from 'astro:content';
import { clsx } from 'clsx';
import { BackButton } from '~/components/BackButton';
import { Button } from '~/components/Button';
import BaseHead from '~/components/BaseHead.astro';
import { CloudinaryImage } from '~/components/CloudinaryImage';
import Container from '~/components/Container';
import ContentSuggestions from '~/components/ContentSuggestions.astro';
import Layout from '~/components/Layout.astro';
import MdContent from '~/components/MdContent.astro';
import SignupForm from '~/components/SignupForm.astro';
import { getBlogs } from '~/data/blog-helpers';
import { getBlogRelatedContents } from '~/data/topic-helpers';
import { getTransformedImage } from '~/lib/cloudinary';

export const getStaticPaths: GetStaticPaths = async function getStaticPaths() {
  const blogs = await getBlogs({ includePreview: true });

  return blogs.map((blog) => ({
    params: {
      slug: blog.slug,
    },
    props: {
      entry: blog,
    } satisfies Props,
  }));
};

interface Props {
  entry: CollectionEntry<'blog'>;
}

const { entry } = Astro.props;
const { Content, headings } = await entry.render();
const { title, description, pubDate, updatedDate, heroImagePublicId, alt, lang } = entry.data;

const relativePath = `blog/${entry.slug}`;

const related = await getBlogRelatedContents(entry);

const imageData = heroImagePublicId ? await getTransformedImage(heroImagePublicId) : undefined;
---

<html lang="en">
  <head>
    <BaseHead
      title={title}
      description={description}
      publishedDate={pubDate}
      updatedDate={updatedDate}
      contentType="article"
      ogBgImage={imageData && imageData.baseSrc}
      articleType="blog"
      themeColor={imageData && imageData.primaryColor}
    />
    <style>
      .heroImgContainer {
        view-transition-name: hero-image;
      }

      .heroImg,
      .heroImgPlaceholder {
        max-height: 45vh;
      }
    </style>
  </head>

  <body>
    <Layout>
      {
        imageData && (
          <div class="sm:px-8">
            <div class="heroImgContainer mt-[-72px] max-w-7xl mx-auto lg:px-8">
              <CloudinaryImage
                data={imageData}
                alt={alt || ''}
                loading="eager"
                className="heroImg max-w-full object-cover"
              />
            </div>
          </div>
        )
      }
      <Container>
        <div class={clsx('relative lg:-left-5', !imageData && 'mt-12')}>
          <BackButton
            className={clsx(
              'hidden sm:flex left-0 md:-left-12',
              imageData ? 'absolute -top-12 lg:top-1' : 'md:absolute -top-4'
            )}
            href="/blog/"
            aria-label="Back to all blogs"
          />
        </div>
        <MdContent
          title={title}
          publishDate={pubDate}
          headings={headings}
          saveKey={relativePath}
          description={description}
          lang={lang}
        >
          <Content />
        </MdContent>
        <SignupForm class="mb-12 offline:hidden" />
        <div
          class="hidden installable:mode-browser:block max-w-2xl mx-auto mb-12 p-4 sm:p-10 rounded shadow text-center"
        >
          <p class="text-2xl font-medium text-zinc-600 mb-3">
            Prefer to get updates in your phone?
          </p>
          <p class="text-zinc-600 mb-3">
            Install this website locally and get notified when a new blog is published <span
              class="line-through">after I figure out how to do web push</span
            >.
          </p>
          <div>
            <Button className="installBtn w-full" data-success>
              <span class="text-lg px-3">Install</span>
            </Button>
          </div>
        </div>
        <div class="border-t border-gray-100 pt-8">
          <ContentSuggestions blogs={related.blogs} tils={related.tils} />
        </div>
      </Container>
    </Layout>
    <script>
      document.querySelectorAll('.installBtn').forEach((installBtn) => {
        installBtn.addEventListener('click', () => {
          if (promptInstall && typeof promptInstall.prompt === 'function') {
            promptInstall.prompt();
            promptInstall = undefined;
            delete document.documentElement.dataset.installable;
          }
        });
      });
    </script>
  </body>
</html>
