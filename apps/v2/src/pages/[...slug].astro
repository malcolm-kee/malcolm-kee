---
import type { GetStaticPaths, GetStaticPathsItem } from 'astro';
import { CollectionEntry, getCollection } from 'astro:content';
import BaseHead from '~/components/BaseHead.astro';
import '~/components/shiki.css';
import WorkshopContent from '~/components/workshop/WorkshopContent.astro';
import WorkshopLayout from '~/components/workshop/WorkshopLayout.astro';
import {
  groupWorkshopLessons,
  type WorkshopTocItem,
  type WorkshopRenderData,
} from '~/data/workshop-helpers';
import type { WorkshopMetadata } from '~/data/workshop-data';

export const getStaticPaths: GetStaticPaths = async function getStaticPaths() {
  const workshopLessons = await getCollection('workshop');

  const workshopMap = groupWorkshopLessons(workshopLessons);

  const result: Array<GetStaticPathsItem> = [];

  workshopMap.forEach(({ lessons, tocItems }) => {
    lessons.forEach((lesson, index) => {
      result.push({
        params: {
          slug: lesson.slug,
        },
        props: {
          entry: lesson.data,
          workshop: lesson.workshop,
          prev: lessons[index - 1],
          next: lessons[index + 1],
          tocItems,
        } satisfies Props,
      });
    });
  });

  return result;
};

interface Props {
  entry: CollectionEntry<'workshop'>;
  workshop: WorkshopMetadata;
  tocItems: Array<WorkshopTocItem>;
  prev?: WorkshopRenderData | undefined;
  next?: WorkshopRenderData | undefined;
}

const { entry, workshop, prev, next, tocItems } = Astro.props;

const {
  data: { title, description },
} = entry;

const { Content, headings } = await entry.render();

const permalink = new URL(entry.slug, Astro.site).toString();
---

<html lang="en">
  <head>
    <BaseHead
      title={`${title} - ${workshop.name}`}
      ogImageTitle={title}
      description={description}
      ogHeading={workshop.name}
      ogBorderColor={workshop.themeColor}
      ogBgImage={workshop.iconUrl}
      iconHref={workshop.smallIconUrl}
      permalink={permalink}
    />
    <script is:inline>
      var isDarkMode = window.matchMedia('(prefers-color-scheme: dark)');

      /**
       * @param {'dark' | 'light' | 'system'} theme
       */
      function updateTheme(theme) {
        theme = theme || window.localStorage.theme || 'system';

        if (theme === 'dark' || (theme === 'system' && isDarkMode.matches)) {
          document.documentElement.classList.add('dark');
        } else if (
          theme === 'light' ||
          (theme === 'system' && !isDarkMode.matches)
        ) {
          document.documentElement.classList.remove('dark');
        }

        return theme;
      }

      function updateThemeWithoutTransitions(theme) {
        updateTheme(theme);
        document.documentElement.classList.add('[&_*]:!transition-none');
        window.setTimeout(() => {
          document.documentElement.classList.remove('[&_*]:!transition-none');
        }, 0);
      }

      document.documentElement.setAttribute('data-theme', updateTheme());

      new MutationObserver(([{ oldValue }]) => {
        let newValue = document.documentElement.getAttribute('data-theme');
        if (newValue !== oldValue) {
          try {
            window.localStorage.setItem('theme', newValue);
          } catch {}
          updateThemeWithoutTransitions(newValue);
        }
      }).observe(document.documentElement, {
        attributeFilter: ['data-theme'],
        attributeOldValue: true,
      });

      isDarkMode.addEventListener('change', () =>
        updateThemeWithoutTransitions()
      );
    </script>
  </head>
  <WorkshopLayout
    workshop={workshop}
    tocItems={tocItems}
    prev={prev}
    next={next}
    headings={headings}
  >
    <WorkshopContent title={title}>
      <Content />
    </WorkshopContent>
  </WorkshopLayout>


</html>
