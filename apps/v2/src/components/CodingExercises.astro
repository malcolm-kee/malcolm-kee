---
import path from 'node:path';
import { fileURLToPath } from 'node:url';

import { init as initLexer, parse } from 'es-module-lexer';
import MarkdownIt from 'markdown-it';
import { markdownItShikiTwoslashSetup } from 'markdown-it-shiki-twoslash';
import { Node, Project } from 'ts-morph';

import { ChevronLeftIcon, ChevronRightIcon } from './icons';
import { ExerciseBox } from './ExerciseBox';

const markdownParser = new MarkdownIt();

const shiki = await markdownItShikiTwoslashSetup({
  theme: 'nord', // for some reason when providing multiple themes it throws error
});

markdownParser.use(shiki);

const modules = import.meta.glob('../exercise/**/*.js', {
  as: 'raw',
}) as Record<string, () => Promise<string>>;

interface Props {
  moduleName: string;
  group: string;
}

const { moduleName, group } = Astro.props;

const applicableModules = new Map<string, () => Promise<string>>();
for (const [modulePath, getModuleContent] of Object.entries(modules)) {
  const relativePath = path.relative(path.resolve('../exercise', moduleName, group), modulePath);
  if (!relativePath.startsWith('..')) {
    applicableModules.set(relativePath, getModuleContent);
  }
}

async function groupModules(modules: Map<string, () => Promise<string>>) {
  const questionModule = new Map<string, [() => Promise<string>, string]>();
  const solutionModule = new Map<string, () => Promise<string>>();
  const testModule = new Map<string, () => Promise<string>>();

  modules.forEach((getModule, key) => {
    const solutionMatch = key.match(/(.+)\.solution\.([j|t]sx?)$/);

    if (solutionMatch) {
      solutionModule.set(`${solutionMatch[1]}.${solutionMatch[2]}`, getModule);
      return;
    }
    const testMatch = key.match(/(.+)\.(?:spec|test)\.([j|t]sx?)$/);

    if (testMatch) {
      testModule.set(`${testMatch[1]}.${testMatch[2]}`, getModule);
      return;
    }

    const questionMatch = key.match(/(.+)\.([j|t]sx?)$/);

    if (questionMatch) {
      questionModule.set(`${questionMatch[1]}.${questionMatch[2]}`, [getModule, questionMatch[2]]);
    }
  });

  const result = new Map<
    string,
    {
      question: string;
      test: string;
      solution: string;
      extension: string;
      docs: string;
    }
  >();

  await initLexer;

  for (const [key, [getQuestion, extension]] of questionModule) {
    const getTest = testModule.get(key);
    const getSolution = solutionModule.get(key);

    if (getSolution && getTest) {
      let [question, test, solution] = await Promise.all([getQuestion(), getTest(), getSolution()]);

      const [imports] = parse(test);

      imports.forEach((importSpecifier) => {
        if (importSpecifier.n && importSpecifier.n.includes('.solution')) {
          test = `${test.slice(0, importSpecifier.s)}${'./index'}${test.slice(importSpecifier.e)}`;
        }
      });

      const project = new Project({
        compilerOptions: {
          allowJs: true,
        },
      });

      const source = project.createSourceFile(
        path.resolve(fileURLToPath(import.meta.url), '..', `problem.${extension}`),
        question
      );

      const defaultExportedSymbol = source.getDefaultExportSymbol();

      let docs = '';

      if (defaultExportedSymbol) {
        const declarations = defaultExportedSymbol.getDeclarations();

        declarations.forEach((declaration) => {
          if (Node.isFunctionDeclaration(declaration)) {
            const jsDocs = declaration.getJsDocs();

            jsDocs.forEach((doc) => {
              const commentText = doc.getCommentText();

              if (commentText) {
                docs += `${commentText}\r\n`;
                question = question.substring(0, doc.getPos()) + question.substring(doc.getEnd());
              }
            });
          }
        });
      }

      result.set(key, {
        question: question.trim(),
        test,
        solution,
        extension,
        docs: docs && markdownParser.render(docs),
      });
    }
  }

  return result;
}

const questionGroup = await groupModules(applicableModules);

const [firstExercise, ...exercises] = [...questionGroup];
---

<section class="CodingExercises border-t border-gray-100 dark:border-zinc-600">
  <script is:inline>
    var savedMode =
      localStorage.getItem('exerciseMode') ||
      (URLSearchParams && new URLSearchParams(location.search).get('exerciseStep') && 'step');
    var mode = savedMode === 'step' ? 'step' : 'all';
    document.querySelectorAll('.CodingExercises').forEach(function (section) {
      section.dataset.exerciseMode = mode;
    });
  </script>
  <div class="flex justify-between items-center pt-2">
    <div class="flex gap-3">
      <button
        type="button"
        class="ShowAllButton button px-3 py-1 sm:text-sm rounded-2xl transition border border-current"
        >Show all</button
      >
      <button
        type="button"
        class="StepByStepButton button px-3 py-1 sm:text-sm rounded-2xl transition border border-current"
        >Step-by-step</button
      >
    </div>
    <nav aria-label="exercise navigation" class="gap-3 hidden">
      <button
        type="button"
        aria-label="Previous exercise"
        class="PrevExerciseButton p-1 rounded-full hover:bg-zinc-100 dark:hover:bg-zinc-600"
      >
        <ChevronLeftIcon width={20} height={20} />
      </button>
      <button
        type="button"
        aria-label="Next exercise"
        class="NextExerciseButton p-1 rounded-full hover:bg-zinc-100 dark:hover:bg-zinc-600"
      >
        <ChevronRightIcon width={20} height={20} />
      </button>
    </nav>
  </div>
  <div class="flex flex-col gap-10">
    {
      firstExercise && (
        <div class="Exercise">
          <ExerciseBox exercise={firstExercise[1]} heading="Exercise 1" client:load />
        </div>
      )
    }
    {
      exercises.map(([, exercise], index) => (
        <div class="Exercise">
          <ExerciseBox exercise={exercise} heading={`Exercise ${index + 2}`} client:visible />
        </div>
      ))
    }
  </div>
  <div class="ExerciseBottomNavigation hidden pt-3">
    <nav aria-label="exercise bottom navigation" class="flex justify-between gap-3">
      <button
        type="button"
        aria-label="Previous exercise"
        class="PrevExerciseButton p-1 rounded-full hover:bg-zinc-100 dark:hover:bg-zinc-600"
      >
        <ChevronLeftIcon width={20} height={20} />
      </button>
      <button
        type="button"
        aria-label="Next exercise"
        class="NextExerciseButton p-1 rounded-full hover:bg-zinc-100 dark:hover:bg-zinc-600"
      >
        <ChevronRightIcon width={20} height={20} />
      </button>
    </nav>
  </div>
</section>

<style>
  [data-exercise-mode='all'] .ShowAllButton,
  [data-exercise-mode='step'] .StepByStepButton {
    @apply bg-primary-600 text-zinc-100 cursor-default shadow-inner border-primary-600;
  }

  [data-exercise-mode='step'] [aria-label='exercise navigation'] {
    @apply flex;
  }
  [data-exercise-mode='step'] .ExerciseBottomNavigation {
    @apply block;
  }
  [data-exercise-mode='step'] .Exercise {
    @apply hidden;
  }
</style>

<script>
  document.querySelectorAll<HTMLElement>('.CodingExercises').forEach((section) => {
    const showAllButton = section.querySelector('.ShowAllButton');
    const stepByStepButton = section.querySelector('.StepByStepButton');

    const initialMode = section.dataset.exerciseMode === 'step' ? 'step' : 'all';

    const setMode = (mode: 'all' | 'step') => {
      section.dataset.exerciseMode = mode;
      localStorage.setItem('exerciseMode', mode);
    };

    if (showAllButton && stepByStepButton) {
      showAllButton.addEventListener('click', () => {
        setMode('all');
        if (history && URLSearchParams) {
          const params = new URLSearchParams(location.search);
          params.delete('exerciseStep');
          const paramsString = params.toString();
          history.replaceState(
            {},
            '',
            `${location.pathname}${paramsString ? `?${paramsString}` : ''}`
          );
        }
      });
      stepByStepButton.addEventListener('click', () => {
        setMode('step');
        setStep(
          Number(
            section.dataset.step ||
              (URLSearchParams && new URLSearchParams(location.search).get('exerciseStep')) ||
              '0'
          )
        );
      });
    }

    const exercises = section.querySelectorAll<HTMLElement>('.Exercise');

    const setStep = (step: number) => {
      exercises.forEach((exercise) => {
        exercise.style.removeProperty('display');
      });
      section.dataset.step = `${step}`;
      const targetExercise = exercises[step];
      if (targetExercise) {
        targetExercise.style.setProperty('display', 'block');
      }
      if (history && URLSearchParams) {
        const params = new URLSearchParams(location.search);
        params.set('exerciseStep', `${step}`);
        history.replaceState({}, '', `${location.pathname}?${params}`);
      }
    };

    if (initialMode === 'step') {
      if (typeof URLSearchParams != null) {
        const params = new URLSearchParams(location.search);
        const currentStep = Number(params.get('exerciseStep') || '0');
        if (!Number.isNaN(currentStep)) {
          setStep(currentStep);
        } else {
          setStep(0);
        }
      } else {
        setStep(0);
      }
    }

    section.querySelectorAll('.NextExerciseButton').forEach((nextButton) => {
      nextButton.addEventListener('click', () => {
        const currentStep = Number(section.dataset.step || '0');
        if (currentStep < exercises.length - 1) {
          setStep(currentStep + 1);
        }
      });
    });

    section.querySelectorAll('.PrevExerciseButton').forEach((prevButton) => {
      prevButton.addEventListener('click', () => {
        const currentStep = Number(section.dataset.step || '0');
        if (currentStep > 0) {
          setStep(currentStep - 1);
        }
      });
    });
  });
</script>
