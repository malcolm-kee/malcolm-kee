---
interface Props {
  threshold?: number;
}

const { threshold = 0.5 } = Astro.props;
---

<style>
  .lazy-load-el {
    --load-delay: 300ms;
    --load-duration: 500ms;
    transition-delay: var(--load-delay);
    transition-duration: var(--load-duration);
  }

  .lazy-load {
    opacity: 0;
    transform: translateY(10%);
  }

  .lazy-load :global(*) {
    animation-play-state: paused !important;
  }
</style>
<div class="lazy-load-el lazy-load opacity-100 transition translate-y-0" data-threshold={threshold}>
  <slot />
</div>
<script>
  import { onIntersectOnce } from '~/lib/intersection-observer';

  const lazyLoadElements = document.querySelectorAll('.lazy-load') as NodeListOf<HTMLElement>;

  if (lazyLoadElements.length > 0) {
    const firstThresholdValue = Number(lazyLoadElements[0].dataset.threshold);

    const threshold =
      firstThresholdValue && !isNaN(firstThresholdValue) ? firstThresholdValue : 0.5;

    onIntersectOnce({
      elements: lazyLoadElements,
      callback: (el) => el.classList.remove('lazy-load'),
      observeOptions: {
        rootMargin: '0px',
        threshold,
      },
    });
  }
</script>
