---
import { getOgImageUrl } from '~/lib/og-image';
import ServiceWorkerRegister from './ServiceWorkerRegister.astro';

export interface Props {
  title?: string | undefined;
  description?: string | undefined;
  themeColor?: string;
  contentType?: 'website' | 'article';
  publishedDate?: Date | undefined;
  updatedDate?: Date | undefined;
  articleType?: 'blog' | 'til' | 'note' | undefined;
  ogHeading?: string | undefined;
  ogBgImage?: string | undefined;
  ogBorderColor?: string | undefined;
  iconHref?: string | undefined;
  ogImageTitle?: string | undefined;
  excludeServiceWorker?: boolean;
}
const {
  title = 'Malcolm Kee',
  description,
  contentType = 'website',
  themeColor,
  publishedDate,
  updatedDate,
  articleType,
  ogHeading = articleType
    ? { blog: 'BLOG', til: 'Today I Learnt', note: 'Note' }[articleType]
    : undefined,
  ogBgImage,
  ogBorderColor = themeColor,
  iconHref,
  ogImageTitle = title,
  excludeServiceWorker,
} = Astro.props;

const permalink = Astro.url.toString();

const ogBgImageUrl =
  ogBgImage && (ogBgImage.startsWith('/') ? new URL(ogBgImage, Astro.site).toString() : ogBgImage);

const ogImage = getOgImageUrl({
  title: ogImageTitle,
  publishedDate,
  heading: ogHeading,
  bgImage: ogBgImageUrl,
  borderColor: ogBorderColor,
});
---

<meta charset="utf-8" />
<meta name="viewport" content="width=device-width" />
{iconHref && <link rel="icon" type="image/jpg" href={iconHref} />}
<title>{title}</title>
<meta name="title" content={title} />
{themeColor && <meta name="theme-color" content={themeColor} />}
{description && <meta name="description" content={description} />}
<link rel="canonical" href={permalink} />
<meta property="og:type" content={contentType} />
<meta property="og:url" content={permalink} />
<meta property="og:title" content={title} />
{description && <meta property="og:description" content={description} />}
<meta property="og:image" content={ogImage} />
{publishedDate && <meta property="article:published_time" content={publishedDate.toISOString()} />}
{publishedDate && <meta property="og:published_date" content={publishedDate.toISOString()} />}
{updatedDate && <meta property="article:modified_time" content={updatedDate.toISOString()} />}

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={permalink} />
<meta property="twitter:title" content={title} />
{description && <meta property="twitter:description" content={description} />}
<meta property="twitter:image" content={ogImage} />
<meta property="twitter:creator" content="@Malcolm_Kee" />

<link rel="sitemap" href="/sitemap-index.xml" />
<script is:inline>
  const isSubscribedKey = 'isSubscriber';

  if (typeof URL !== 'undefined' && history.pushState) {
    const url = new URL(window.location);
    const subscriberIdKey = 'ck_subscriber_id';
    const isSubscriberLink = !!url.searchParams.get(subscriberIdKey);

    if (isSubscriberLink) {
      // remove ugly query params
      url.searchParams.delete(subscriberIdKey);
      history.pushState(null, '', url.toString());

      window.localStorage.setItem(isSubscribedKey, 'true');
    }
  }

  const isSubscriber = window.localStorage.getItem(isSubscribedKey);

  if (isSubscriber) {
    document.documentElement.dataset.subscriber = 'true';
  }
</script>
<script type="text/partytown" src="https://www.googletagmanager.com/gtag/js?id=G-BYCSKZQJNC"
></script>
<script type="text/partytown">
  window.dataLayer = window.dataLayer || [];
  function gtag() {
    dataLayer.push(arguments);
  }
  gtag('js', new Date());

  gtag('config', 'G-BYCSKZQJNC');
</script>
<meta name="view-transition" content="same-origin" />
<style is:global>
  @keyframes fade-in {
    from {
      opacity: 0;
    }
  }

  @keyframes fade-out {
    to {
      opacity: 0;
    }
  }

  @keyframes slide-from-top {
    from {
      transform: translateY(-30px);
    }
  }

  @keyframes slide-to-top {
    to {
      transform: translateY(-30px);
    }
  }

  @keyframes slide-from-left {
    from {
      transform: translateX(-30px);
    }
  }

  @keyframes slide-to-left {
    to {
      transform: translateX(-30px);
    }
  }

  ::view-transition-new(workshop-header):only-child {
    animation: 300ms cubic-bezier(0, 0, 0.2, 1) both fade-in,
      300ms cubic-bezier(0.4, 0, 0.2, 1) both slide-from-top;
  }

  ::view-transition-old(workshop-header):only-child {
    animation: 300ms cubic-bezier(0, 0, 0.2, 1) both fade-out,
      300ms cubic-bezier(0.4, 0, 0.2, 1) both slide-to-top;
  }

  ::view-transition-new(back-button):only-child {
    animation: 300ms cubic-bezier(0, 0, 0.2, 1) both fade-in,
      300ms cubic-bezier(0.4, 0, 0.2, 1) both slide-from-left;
  }

  ::view-transition-old(back-button):only-child {
    animation: 300ms cubic-bezier(0, 0, 0.2, 1) both fade-out,
      300ms cubic-bezier(0.4, 0, 0.2, 1) both slide-to-left;
  }
</style>
<script>
  import { checkOnlineStatus } from '~/lib/check-online-status';
  import { makeScrollableFocusable } from '~/lib/make-scrollable-focusable';

  checkOnlineStatus({
    onStatusChange: (isOnline) => {
      document.documentElement.dataset.online = String(isOnline);
    },
    initialOnline: undefined,
  });

  makeScrollableFocusable('.code-container');
</script>
{!excludeServiceWorker && <ServiceWorkerRegister />}
<script is:inline>
  window.addEventListener('beforeinstallprompt', (installPromptEvent) => {
    installPromptEvent.preventDefault(); // prevent prompt for now

    promptInstall = installPromptEvent;

    document.documentElement.dataset.installable = 'true';
  });

  if (Notification.permission === 'default') {
    document.documentElement.dataset.subscribable = 'true';
  }
</script>
<style>
  @font-face {
    font-family: 'Chakra Petch-fallback';
    size-adjust: 102.69%;
    src: local('Arial');
  }

  @font-face {
    font-family: 'Chakra Petch';
    src: url('/assets/font/static/ChakraPetch-Regular.woff2') format('woff2'),
      url('/assets/font/static/ChakraPetch-Regular.woff') format('woff');
    font-weight: 400;
    font-display: block;
  }
  @font-face {
    font-family: 'Chakra Petch';
    src: url('/assets/font/static/ChakraPetch-Medium.woff2') format('woff2'),
      url('/assets/font/static/ChakraPetch-Medium.woff') format('woff');
    font-weight: 500;
    font-display: block;
  }

  @font-face {
    font-family: 'Chakra Petch';
    src: url('/assets/font/static/ChakraPetch-SemiBold.woff2') format('woff2'),
      url('/assets/font/static/ChakraPetch-SemiBold.woff') format('woff');
    font-weight: 600;
    font-display: block;
  }

  @font-face {
    font-family: 'Chakra Petch';
    src: url('/assets/font/static/ChakraPetch-Bold.woff2') format('woff2'),
      url('/assets/font/static/ChakraPetch-Bold.woff') format('woff');
    font-weight: 700;
    font-display: block;
  }

  @font-face {
    font-family: 'Chakra Petch';
    src: url('/assets/font/static/ChakraPetch-Light.woff2') format('woff2'),
      url('/assets/font/static/ChakraPetch-Light.woff') format('woff');
    font-weight: 100 300;
    font-display: block;
  }
</style>
