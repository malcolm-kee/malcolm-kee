---
import { clsx } from 'clsx';

export interface Props {
  saveKey: string;
  pageTitle: string;
  pageDescription?: string;
  className?: string;
}

const { className, saveKey, pageTitle, pageDescription } = Astro.props;

const { pathname } = Astro.url;
---

<button
  data-savekey={saveKey}
  data-pagetitle={pageTitle}
  data-pagedescription={pageDescription}
  data-path={pathname}
  class={clsx(
    'SavePageButton hidden saveable:inline-flex rounded-full group/savebutton',
    'text-zinc-500 data-[state=success]:text-teal-700 active:translate-y-px data-[state=loading]:active:translate-y-0',
    className
  )}
  type="button"
  aria-label="Save this page"
>
  <svg width="80" height="80" viewBox="0 0 80 80" fill="none" stroke="currentColor">
    <path
      d="M51 5H29V46L40 30L51 46V5Z"
      stroke-width="2"
      fill="white"
      class={clsx(
        'bookmark-path transition-all group-hover/savebutton:fill-zinc-50 group-active/savebutton:fill-zinc-100',
        'group-data-[state=success]/savebutton:fill-teal-600'
      )}></path>
  </svg>
  <span class="relative">
    <span class="SavePageButtonLabel sr-only">Save</span>
  </span>
</button>

<script>
  import {
    loadPageSaveCapability,
    removePage,
    requestPersistentStorage,
    savePageDependencies,
  } from '~/data/offline-helpers';
  import { onOnlineStatusChange } from '~/lib/check-online-status';

  const svgPathsD = {
    saved: 'M51 5H29V76L40 60L51 76V5Z',
    unsaved: 'M51 5H29V46L40 30L51 46V5Z',
  };

  const saveStateByPage = new Map<string, boolean>();

  const saveButtons = document.querySelectorAll<HTMLButtonElement>('.SavePageButton');

  onOnlineStatusChange((isOnline) =>
    saveButtons.forEach((button) => {
      button.disabled = !isOnline;
    })
  );

  saveButtons.forEach((button) => {
    const { dataset } = button;

    if (
      button instanceof HTMLButtonElement &&
      dataset.savekey &&
      dataset.pagetitle &&
      dataset.path
    ) {
      const saveKey = dataset.savekey;

      const pageInfo = {
        title: dataset.pagetitle,
        path: dataset.path,
        ...(dataset.pagedescription
          ? {
              description: dataset.pagedescription,
            }
          : {}),
      };

      loadPageSaveCapability(saveKey, pageInfo).then((capability) => {
        if (capability.allowed) {
          button.classList.remove('hidden');

          const label = button.querySelector('.SavePageButtonLabel');
          const bookmarkPath = button.querySelector<SVGPathElement>('.bookmark-path');

          if (capability.saved) {
            if (label) label.textContent = 'Saved';
            if (bookmarkPath) bookmarkPath.setAttribute('d', svgPathsD.saved);
            button.dataset.state = 'success';
            button.ariaLabel = 'Unsave this page';
          }

          saveStateByPage.set(saveKey, capability.saved);

          const getSameKeyButtons = () =>
            document.querySelectorAll<HTMLButtonElement>(
              `.SavePageButton[data-savekey="${saveKey}"]`
            );

          let isBusy = false;
          button.addEventListener('click', () => {
            if (isBusy) {
              return;
            }

            isBusy = true;

            const isSaving = !saveStateByPage.get(saveKey);

            const operation = isSaving
              ? requestPersistentStorage().then(() =>
                  savePageDependencies(saveKey, pageInfo, capability.dependencies)
                )
              : removePage(saveKey);

            getSameKeyButtons().forEach(
              (sameKeyButton) => (sameKeyButton.dataset.state = 'loading')
            );

            operation.then(() => {
              isBusy = false;
              saveStateByPage.set(saveKey, isSaving);

              getSameKeyButtons().forEach((sameKeyButton) => {
                const buttonLabel = sameKeyButton.querySelector('.SavePageButtonLabel');
                const bookmarkPath = sameKeyButton.querySelector<SVGPathElement>('.bookmark-path');

                if (buttonLabel) {
                  buttonLabel.textContent = isSaving ? 'Saved' : 'Save';
                }
                if (isSaving) {
                  sameKeyButton.dataset.state = 'success';
                  bookmarkPath && bookmarkPath.setAttribute('d', svgPathsD.saved);
                  sameKeyButton.ariaLabel = 'Unsave this page';
                } else {
                  delete sameKeyButton.dataset.state;
                  bookmarkPath && bookmarkPath.setAttribute('d', svgPathsD.unsaved);
                  sameKeyButton.ariaLabel = 'Save this page';
                }
              });
            });
          });
        } else {
          button.classList.add('!hidden');
        }
      });
    }
  });
</script>
