---
import { CodeIcon, PlayIcon } from './icons';
import { LiveEditor } from './LiveEditor';

interface Props {
  previewMinHeight?: string;
  codeMaxHeight?: string;
}

const { previewMinHeight = 'auto', codeMaxHeight = 'auto' } = Astro.props;
---

<style define:vars={{ previewMinHeight, codeMaxHeight }}>
  [data-live-editor] {
    --preview-min-height: var(--previewMinHeight);
    --code-max-height: var(--codeMaxHeight);
  }
</style>
<div
  class="bg-gray-100 text-zinc-900 dark:bg-zinc-600 dark:text-zinc-200 rounded-xl"
  data-live-editor
>
  <div class="flex justify-between items-center px-2 py-1">
    <span class="text-sm" data-editor-mode></span>
    <div class="inline-flex gap-2">
      <button
        type="button"
        class="p-1 bg-white dark:bg-zinc-400 rounded-full"
        data-edit-button
        aria-label="Edit"
      >
        <PlayIcon aria-hidden className="w-6 h-6 text-gray-500 dark:text-zinc-700" />
      </button>
      <button
        type="button"
        data-cancel-button
        aria-label="Cancel"
        class="p-1 bg-white dark:bg-zinc-400 rounded-full hidden"
      >
        <CodeIcon aria-hidden className="w-6 h-6 text-gray-500 dark:text-zinc-700" />
      </button>
    </div>
  </div>
  <div data-editor-code>
    <slot />
  </div>
  <div class="hidden border border-gray-100 dark:border-zinc-600" data-editor>
    <LiveEditor client:load>
      <slot />
    </LiveEditor>
  </div>
</div>

<script>
  import scrollIntoView from 'scroll-into-view-if-needed';
  import { isVisible } from '~/lib/dom-helpers';

  const liveEditors = document.querySelectorAll('[data-live-editor]');

  liveEditors.forEach(($editorSection) => {
    const $editButton = $editorSection.querySelector('[data-edit-button]');
    const $cancelButton = $editorSection.querySelector('[data-cancel-button]');
    const $code = $editorSection.querySelector('[data-editor-code]');
    const $editor = $editorSection.querySelector('[data-editor]');
    const $mode = $editorSection.querySelector('[data-editor-mode]');

    if ($code && $editButton && $cancelButton && $editor && $mode) {
      $editButton.addEventListener('click', () => {
        $editButton.classList.add('hidden');
        $cancelButton.classList.remove('hidden');
        $mode.textContent = 'Editing';
        const codeStyle = window.getComputedStyle($code);
        const codeHeight = codeStyle.getPropertyValue('height');
        $code.classList.add('hidden');
        $editor.classList.remove('hidden');
        ($editor as HTMLElement).style.setProperty('--editor-height', codeHeight);
      });

      $cancelButton.addEventListener('click', () => {
        $cancelButton.classList.add('hidden');
        $editButton.classList.remove('hidden');
        $mode.textContent = null;

        $editor.classList.add('hidden');
        $code.classList.remove('hidden');
      });
    }
  });

  liveEditors.forEach((editorSection) => {
    editorSection.querySelectorAll('.code-container').forEach((codeContainer) => {
      if (isVisible(codeContainer as HTMLElement)) {
        const highlightedLine = codeContainer.querySelector('.line.highlight');

        if (highlightedLine) {
          scrollIntoView(highlightedLine, {
            scrollMode: 'if-needed',
            boundary: codeContainer,
          });
        }
      }
    });
  });
</script>
