---
import { clsx } from 'clsx';
import type { MarkdownHeading } from 'astro';
import { CloseIcon } from '~/components/icons';

export interface Props {
  headings: Array<MarkdownHeading>;
}

const { headings } = Astro.props;
---

<nav
  aria-labelledby="toc-label"
  class={clsx(
    'MdToc group/mdtoc flex flex-col gap-3 transition-colors',
    'mb-8 py-3 max-w-3xl mx-auto data-[expanded=true]:rounded-md data-[expanded=true]:shadow',
    'xl:hidden'
  )}
  data-expanded="false"
>
  <div class="relative">
    <div
      class={clsx(
        'MdTocLabel px-6',
        'text-xl transition-transform duration-300 delay-300',
        'group-data-[expanded=true]/mdtoc:delay-0'
      )}
      id="toc-label"
    >
      Contents
    </div>
    <button
      aria-controls="toc-items"
      aria-expanded="false"
      aria-label="Show"
      type="button"
      class={clsx(
        'flex items-center',
        'absolute top-0 right-0 bottom-0 left-0 w-full px-4',
        'group/toggle'
      )}
    >
      <span
        class={clsx(
          'transition-all duration-200 text-start',
          'group-aria-expanded/toggle:flex-1 group-aria-expanded/toggle:duration-500'
        )}
      >
        <span
          aria-hidden
          class={clsx(
            'block -ml-4 pl-2 text-zinc-500 text-xl bg-zinc-50 duration-300 delay-100 rounded-l-md shadow',
            'group-aria-expanded/toggle:ml-0 group-aria-expanded/toggle:text-zinc-900 group-aria-expanded/toggle:shadow-none',
            'group-hover/toggle:bg-zinc-100 group-hover/toggle:delay-0',
            'group-aria-expanded/toggle:delay-0 group-aria-expanded/toggle:group-hover/toggle:bg-zinc-50'
          )}
        >
          <span
            class={clsx(
              'block text-start origin-left scale-[0.8] font-light duration-300 delay-100',
              'group-aria-expanded/toggle:scale-100 group-aria-expanded/toggle:font-normal group-aria-expanded/toggle:delay-0'
            )}>Contents</span
          >
        </span>
      </span>
      <span
        class={clsx(
          'IconWrapper block pr-2 py-1 bg-zinc-50 shadow rounded-r-md duration-300 group-aria-expanded/toggle:shadow-none',
          'group-hover/toggle:bg-zinc-100 group-aria-expanded/toggle:group-hover/toggle:bg-zinc-50'
        )}
      >
        <CloseIcon
          aria-hidden
          className={clsx(
            'w-5 h-5 stroke-zinc-500 transition',
            '-rotate-[135deg] scale-[0.6]',
            'group-aria-expanded/toggle:rotate-0 group-aria-expanded/toggle:scale-100 group-aria-expanded/toggle:duration-500'
          )}
        />
      </span>
    </button>
  </div>
  <ol class="toc flex flex-col gap-4 pb-3 px-6" id="toc-items">
    {
      headings.map((h, index) => {
        const indent = Math.max(0, h.depth - 2);

        return (
          <li class="toc-item" style={`--index: ${index}; --indent: ${indent}`}>
            <a
              href={`#${h.slug}`}
              class={clsx(
                'text-zinc-500 underline md:no-underline transition hover:text-primary-600',
                indent > 0 && 'text-sm'
              )}
              data-target={h.slug}
            >
              {h.text}
            </a>
          </li>
        );
      })
    }
  </ol>
</nav>
<style>
  @keyframes slideFromLeft {
    0% {
      opacity: 0;
      transform: translateX(-8px);
    }

    100% {
      opacity: 1;
      transform: translateX(0px);
    }
  }

  [aria-expanded] {
    -webkit-tap-highlight-color: transparent;
  }

  .MdToc[data-expanded='true'] {
    @apply bg-zinc-50 border-transparent shadow-sm;
  }

  .MdToc[data-expanded='false'] .toc {
    display: none;
  }

  .toc-item {
    padding-left: calc(var(--indent) * 1rem);
  }

  @screen md {
    .toc-item {
      padding-left: calc(var(--indent) * 2rem);
    }
  }

  .MdToc[data-expanded='true'] .toc-item {
    animation: slideFromLeft 300ms both;
    animation-delay: calc(calc(var(--index) * 100ms) + 100ms);
  }

  .IconWrapper {
    clip-path: inset(-3px -3px -3px 0);
  }
</style>
<script>
  document.querySelectorAll('[aria-labelledby="toc-label"]').forEach((tocSection) => {
    setupCollapsible(tocSection);
  });

  function setupCollapsible(tocSection: Element) {
    const section = tocSection as HTMLElement;
    const toggleButton = tocSection.querySelector('[aria-controls]');

    if (toggleButton) {
      toggleButton.addEventListener('click', () => {
        const currentExpanded = toggleButton.getAttribute('aria-expanded');
        const isNextExpanded = currentExpanded === 'false';
        toggleButton.setAttribute('aria-expanded', String(isNextExpanded));
        toggleButton.setAttribute('aria-label', isNextExpanded ? 'Hide' : 'Show');

        section.dataset.expanded = String(isNextExpanded);
      });
    }
  }
</script>

<nav
  class="StickyMdToc hidden xl:flex gap-3 float-right sticky top-14 -mr-12"
  aria-labelledby="mdtoc-label"
>
  <div class="sr-only" id="mdtoc-label">Contents</div>
  <ol class="flex flex-col gap-4">
    {
      headings.map((h) => {
        const indent = Math.max(0, h.depth - 2);

        return (
          <li style={`--indent: ${indent}`}>
            <a
              href={`#${h.slug}`}
              class="StickyLink text-sm text-zinc-500 transition hover:text-primary-600"
              data-target={h.slug}
            >
              {h.text}
            </a>
          </li>
        );
      })
    }
  </ol>
</nav>

<style>
  .StickyMdToc {
    width: calc(1072px - 768px - 16px);
  }

  .StickyLink {
    padding-left: calc(var(--indent) * 1rem);
  }
</style>

<script>
  import { listen } from '~/lib/event-helper';

  document.querySelectorAll('.StickyMdToc').forEach((tocSection) => {
    highlightCurrentActiveHeading(tocSection);
  });

  function highlightCurrentActiveHeading(tocSection: Element) {
    const links = tocSection.querySelectorAll<HTMLElement>('li > a');

    const headings: Array<{
      element: HTMLElement;
      top: number;
    }> = [];

    links.forEach((element) => {
      const target = element.dataset.target;

      const targetElement = target && document.getElementById(target);

      if (targetElement) {
        const scrollMt = parseFloat(window.getComputedStyle(targetElement).scrollMarginTop);

        const top =
          window.scrollY +
          targetElement.getBoundingClientRect().top -
          scrollMt -
          window.innerHeight / 2;

        headings.push({
          top,
          element,
        });
      }
    });

    if (headings.length === 0) {
      return;
    }

    const mediaQuery = window.matchMedia('(min-width: 1280px)');

    let cleanup: () => void | undefined;

    function syncLinks() {
      let top = window.scrollY;
      let current = headings[0];
      for (let heading of headings) {
        if (top >= heading.top) {
          current = heading;
        } else {
          break;
        }
      }
      if (current) {
        links.forEach((link) => {
          if (link === current.element) {
            link.classList.add('text-primary-500');
            link.classList.remove('text-zinc-500');
          } else {
            link.classList.add('text-zinc-500');
            link.classList.remove('text-primary-500');
          }
        });
      }
    }

    function setupScrollListener() {
      if (mediaQuery.matches) {
        if (cleanup) cleanup();

        syncLinks();
        cleanup = listen(window, 'scroll', syncLinks, { passive: true });
      } else {
        if (cleanup) cleanup();
        links.forEach((link) => {
          link.classList.add('text-zinc-500');
          link.classList.remove('text-primary-500');
        });
      }
    }

    setupScrollListener();

    listen(mediaQuery, 'change', setupScrollListener);
  }
</script>
