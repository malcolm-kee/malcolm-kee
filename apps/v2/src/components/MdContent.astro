---
import type { MarkdownHeading } from 'astro';
import { clsx } from 'clsx';
import { formatDate, isFuture } from '~/lib/date';
import MdToc from './MdToc.astro';
import SavePageButton from './SavePageButton.astro';
import './shiki.css';

export interface Props {
  title: string;
  lang?: string;
  headings?: Array<MarkdownHeading>;
  publishDate?: Date;
  /** key used for offline saving. Required for supporting save for offline */
  saveKey?: string;
  description?: string;
}

const { title, publishDate, headings, saveKey, description, lang = 'en-US' } = Astro.props;

const isFutureContent = publishDate && isFuture(publishDate);

const levelTwoHeadings = headings && headings.filter((h) => h.slug !== 'footnote-label');

const hasHeadings = levelTwoHeadings && levelTwoHeadings.length > 0;
---

<div class="mb-12">
  <article lang={lang}>
    <div class="flex items-start mb-8 sm:pb-8 sm:border-b sm:border-gray-100">
      <header
        class={clsx('relative max-w-3xl w-full', hasHeadings ? 'mx-auto xl:ml-0' : 'mx-auto')}
      >
        {
          publishDate && (
            <p class="my-3 text-zinc-400 pl-4 border-l-4 border-l-zinc-100">
              {isFutureContent ? `To be published on ` : null}
              {formatDate(publishDate, lang)}
            </p>
          )
        }
        <h1
          class="content-title font-techie text-4xl sm:text-5xl font-bold w-full bg-transparent [text-wrap:balance]"
        >
          {title}
        </h1>
      </header>
      {
        saveKey && (
          <div class="hidden xl:block xl:-translate-y-2">
            <SavePageButton
              saveKey={saveKey}
              pageTitle={title}
              pageDescription={description}
              className="sm:justify-start"
            />
          </div>
        )
      }
    </div>
    <div
      class="flex gap-3 justify-between sm:items-start sm:gap-3 xl:contents relative max-w-3xl mx-auto xl:max-w-none xl:mb-0"
    >
      {
        hasHeadings && (
          <div class="flex-1 xl:contents">
            <MdToc headings={levelTwoHeadings} />
          </div>
        )
      }
      {
        saveKey && (
          <div class="fixed z-20 top-0 right-1/3 -translate-y-2 sm:block xl:hidden sm:ml-auto sm:-translate-y-10 sm:absolute sm:right-0 sm:top-0">
            <SavePageButton
              saveKey={saveKey}
              pageTitle={title}
              pageDescription={description}
              className="w-full sm:w-auto sm:justify-start"
            />
          </div>
        )
      }
    </div>
    <div
      class={clsx(
        'Content',
        'max-w-3xl prose mt-3 sm:mt-6 xl:mt-0',
        'prose-headings:font-techie prose-headings:scroll-mt-20',
        'prose-a:no-underline prose-a:text-primary-600 prose-a:font-normal prose-a:border-b prose-a:border-dashed prose-a:border-gray-700/50 hover:prose-a:border-solid hover:prose-a:border-primary-500 hover:prose-a:text-primary-700',
        'prose-a:scroll-mt-20',
        'prose-code:break-words',
        hasHeadings ? 'mx-auto xl:ml-0' : 'mx-auto'
      )}
      data-md-content
    >
      <slot />
    </div>
  </article>
</div>

<style lang="scss">
  @keyframes twinkle {
    0% {
      opacity: 0%;
    }
    50% {
      opacity: 100%;
    }
    100% {
      opacity: 0%;
    }
  }

  .Content {
    :global(h1:target::before, h2:target::before, h3:target::before, h4:target::before) {
      content: '>';
      color: theme('colors.primary.500');
      position: absolute;
      left: 0;
      transform: translateY(-70%) rotate(90deg);
      animation: twinkle 700ms 3;
      opacity: 0;
    }

    :global(.footnotes li[id]) {
      @apply scroll-mt-20;
    }
  }

  @media (min-width: theme('screens.md')) {
    .Content {
      :global(h1:target::before, h2:target::before, h3:target::before, h4:target::before) {
        left: -8px;
        transform: translateX(-100%) rotate(0deg);
      }
    }
  }
</style>

<script>
  import { createTooltip } from '~/lib/create-tooltip';

  const mdContents = document.querySelectorAll('[data-md-content]');

  mdContents.forEach((mdContent) => {
    const footNoteRef = mdContent.querySelectorAll('a[data-footnote-ref]');

    footNoteRef.forEach((el) => {
      const parentSupEl = el.closest('sup');

      if (!parentSupEl) {
        return;
      }

      const href = el.getAttribute('href');
      if (href) {
        const target = document.querySelector(href);
        if (target && target instanceof HTMLElement) {
          const childs: Array<Node> = [];
          target.childNodes.forEach((childNode) => {
            if (childNode instanceof HTMLElement) {
              const cloned = document.createElement('div');
              cloned.innerHTML = childNode.innerHTML;
              cloned.childNodes.forEach((grandChild) => {
                if (
                  grandChild instanceof HTMLElement &&
                  grandChild.hasAttribute('data-footnote-backref')
                ) {
                  grandChild.remove();
                }
              });
              childs.push(cloned);
            }
          });
          if (childs.length > 0) {
            const tooltipEl = document.createElement('div');
            tooltipEl.role = 'tooltip';
            childs.forEach((child) => tooltipEl.appendChild(child));
            const arrowEl = document.createElement('div');
            tooltipEl.appendChild(arrowEl);
            parentSupEl.insertAdjacentElement('afterend', tooltipEl);

            createTooltip({
              anchor: el,
              tooltip: tooltipEl,
              arrow: arrowEl,
            });
          }
        }
      }
    });
  });
</script>
