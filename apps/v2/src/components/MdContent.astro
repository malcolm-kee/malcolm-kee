---
import './shiki.css';

export interface Props {
  title: string;
  publishDate?: string;
  heroImage?: string | undefined;
  alt?: string | undefined;
}

const { title, publishDate, heroImage, alt } = Astro.props;
---

<div class="layout">
  <article class="content">
    <div>
      <header
        class="flex flex-col justify-center items-center text-center pb-8 mb-8 border-b border-gray-100"
      >
        {
          heroImage && (
            <img
              width="720"
              height="420"
              class="hero-image"
              loading="lazy"
              src={heroImage}
              alt={alt}
            />
          )
        }
        <p class="my-3 text-zinc-600">{publishDate}</p>
        <h1 class="text-4xl font-bold max-w-3xl mx-auto">{title}</h1>
      </header>
      <main class="max-w-3xl mx-auto prose" data-md-content>
        <slot />
      </main>
    </div>
  </article>
</div>

<style>
  .hero-image {
    width: 100vw;
    object-fit: cover;
    object-position: center;
    margin-top: 2rem;
    margin-bottom: 4rem;
    max-width: 1280px;
  }

  @media (max-width: 50em) {
    .hero-image {
      height: 260px;
      margin-top: 0;
      margin-bottom: 2rem;
    }
  }

  .content {
    margin-bottom: 8rem;
  }

  .content :global(main > * + *) {
    margin-top: 1rem;
  }

  .content :global(h2) {
    margin-top: 4rem;
  }
</style>

<script>
  import { createTooltip } from '~/lib/create-tooltip';

  const mdContents = document.querySelectorAll('[data-md-content]');

  mdContents.forEach((mdContent) => {
    const footNoteRef = mdContent.querySelectorAll('a[data-footnote-ref]');

    footNoteRef.forEach((el) => {
      const parentSupEl = el.closest('sup');

      if (!parentSupEl) {
        return;
      }

      const href = el.getAttribute('href');
      if (href) {
        const target = document.querySelector(href);
        if (target && target instanceof HTMLElement) {
          const childs: Array<Node> = [];
          target.childNodes.forEach((childNode) => {
            if (childNode instanceof HTMLElement) {
              const cloned = document.createElement('div');
              cloned.innerHTML = childNode.innerHTML;
              cloned.childNodes.forEach((grandChild) => {
                if (
                  grandChild instanceof HTMLElement &&
                  grandChild.hasAttribute('data-footnote-backref')
                ) {
                  grandChild.remove();
                }
              });
              childs.push(cloned);
            }
          });
          if (childs.length > 0) {
            const tooltipEl = document.createElement('div');
            tooltipEl.role = 'tooltip';
            childs.forEach((child) => tooltipEl.appendChild(child));
            const arrowEl = document.createElement('div');
            tooltipEl.appendChild(arrowEl);
            parentSupEl.insertAdjacentElement('afterend', tooltipEl);

            createTooltip({
              anchor: el,
              tooltip: tooltipEl,
              arrow: arrowEl,
            });
          }
        }
      }
    });
  });
</script>
