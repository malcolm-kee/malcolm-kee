---
import { BackButton } from '~/components/BackButton';
import './shiki.css';
import {
  getCloudinaryHelpers,
  getCloudinaryImageInfo,
} from '../lib/cloudinary';
import { formatDate } from '~/lib/date';
import { clsx } from 'clsx';

export interface Props {
  title: string;
  publishDate?: Date;
  heroImage?: string;
  alt?: string;
  backUrl?: string;
}

const { title, publishDate, heroImage, alt, backUrl } = Astro.props;

const { checkIsCloudinaryImage } = getCloudinaryHelpers({
  cloudinaryUsername: 'malcolm-kee',
});

const imageInfo =
  heroImage && checkIsCloudinaryImage(heroImage)
    ? await getCloudinaryImageInfo(heroImage)
    : undefined;
---

<style>
  .heroImgContainer {
    margin-top: calc(0px - var(--header-height, 72px));
  }

  .heroImg,
  .heroImgPlaceholder {
    max-height: 45vh;
  }

  @media screen(lg) {
    .heroImg {
      top: calc(0px - var(--header-height, 72px));
    }
  }
</style>

<div class={clsx(heroImage ? 'mb-12' : 'my-12')}>
  <article>
    <div class="xl:relative">
      {
        backUrl && (
          <BackButton
            href={backUrl}
            className={clsx(
              heroImage ? 'absolute z-10 top-6' : 'lg:absolute',
              'lg:-left-5 lg:mb-0'
            )}
          />
        )
      }
    </div>
    <header class="flex flex-col mb-8 sm:pb-8 sm:border-b sm:border-gray-100">
      {
        heroImage && (
          <div class="heroImgContainer -mx-4 sm:-mx-8 lg:-mx-12">
            {imageInfo && (
              <div
                style={`aspect-ratio: ${imageInfo.output.width} / ${imageInfo.output.height};`}
                class="heroImgPlaceholder hidden lg:block"
              />
            )}
            <img
              width={imageInfo && imageInfo.output.width}
              height={imageInfo && imageInfo.output.height}
              class="heroImg max-w-full object-cover lg:absolute lg:left-1/2 lg:-translate-x-1/2"
              loading="eager"
              src={heroImage}
              alt={alt}
            />
          </div>
        )
      }
      <div class="max-w-3xl mx-auto w-full">
        {
          publishDate && (
            <p class="my-3 text-zinc-400 pl-4 border-l-4 border-l-zinc-100">
              {formatDate(publishDate)}
            </p>
          )
        }
        <h1 class="text-3xl sm:text-4xl font-bold w-full">{title}</h1>
      </div>
    </header>
    <main class="max-w-3xl mx-auto prose" data-md-content>
      <slot />
    </main>
  </article>
</div>

<script>
  import { createTooltip } from '~/lib/create-tooltip';

  const mdContents = document.querySelectorAll('[data-md-content]');

  mdContents.forEach((mdContent) => {
    const footNoteRef = mdContent.querySelectorAll('a[data-footnote-ref]');

    footNoteRef.forEach((el) => {
      const parentSupEl = el.closest('sup');

      if (!parentSupEl) {
        return;
      }

      const href = el.getAttribute('href');
      if (href) {
        const target = document.querySelector(href);
        if (target && target instanceof HTMLElement) {
          const childs: Array<Node> = [];
          target.childNodes.forEach((childNode) => {
            if (childNode instanceof HTMLElement) {
              const cloned = document.createElement('div');
              cloned.innerHTML = childNode.innerHTML;
              cloned.childNodes.forEach((grandChild) => {
                if (
                  grandChild instanceof HTMLElement &&
                  grandChild.hasAttribute('data-footnote-backref')
                ) {
                  grandChild.remove();
                }
              });
              childs.push(cloned);
            }
          });
          if (childs.length > 0) {
            const tooltipEl = document.createElement('div');
            tooltipEl.role = 'tooltip';
            childs.forEach((child) => tooltipEl.appendChild(child));
            const arrowEl = document.createElement('div');
            tooltipEl.appendChild(arrowEl);
            parentSupEl.insertAdjacentElement('afterend', tooltipEl);

            createTooltip({
              anchor: el,
              tooltip: tooltipEl,
              arrow: arrowEl,
            });
          }
        }
      }
    });
  });
</script>
