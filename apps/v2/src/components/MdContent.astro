---
import type { MarkdownHeading } from 'astro';
import { clsx } from 'clsx';
import { formatDate, isFuture } from '~/lib/date';
import { BackButton } from './BackButton';
import Footer from './Footer';
import Header from './Header';
import MdToc from './MdToc.astro';
import SavePageButton from './SavePageButton.astro';
import './shiki-v2.css';
import '@shikijs/twoslash/style-rich.css';

export interface Props {
  title: string;
  lang?: string;
  headings?: Array<MarkdownHeading>;
  publishDate?: Date;
  updatedDate?: Date;
  backUrl?: string;
  backButtonLabel?: string;
  /** key used for offline saving. Required for supporting save for offline */
  saveKey?: string;
  description?: string;
}

const {
  title,
  publishDate,
  updatedDate,
  headings,
  backUrl,
  backButtonLabel = 'Go back',
  saveKey,
  description,
  lang = 'en-US',
} = Astro.props;

const isFutureContent = publishDate && isFuture(publishDate);

const levelTwoHeadings = headings && headings.filter((h) => h.slug !== 'footnote-label');

const hasHeadings = levelTwoHeadings && levelTwoHeadings.length > 0;

const currentPath = new URL(Astro.request.url).pathname;
---

<div class="relative">
  <Header currentPath={currentPath} client:load />
  <main>
    <slot name="layout-header">
      <div class="pt-12"></div>
    </slot>
    <div class="sm:px-8">
      <div class="relative max-w-7xl mx-auto px-4 sm:px-8 lg:px-20 xl:max-w-none xl:px-0">
        {
          backUrl && (
            <div class="hidden sm:block xl:grid xl:grid-cols-center xl:gap-3 xl:justify-items-end xl:h-0">
              <BackButton href={backUrl} aria-label={backButtonLabel} />
            </div>
          )
        }
        <div class="mb-12">
          <article lang={lang}>
            <section
              class="xl:grid xl:grid-cols-center xl:gap-3 mb-8 sm:pb-8 sm:border-b sm:border-gray-100"
            >
              <header class={clsx('relative w-full xl:col-start-2')}>
                {
                  publishDate && (
                    <p class="flex flex-col gap-1 my-3 text-zinc-400 pl-4 border-l-4 border-l-zinc-100">
                      {isFutureContent ? (
                        `To be published on ${formatDate(publishDate, lang)}`
                      ) : updatedDate ? (
                        <>
                          {formatDate(updatedDate, lang)}{' '}
                          <small>First publish on {formatDate(publishDate, lang)}</small>
                        </>
                      ) : (
                        formatDate(publishDate, lang)
                      )}
                    </p>
                  )
                }
                <h1
                  class="content-title font-techie text-4xl sm:text-5xl font-bold w-full bg-transparent [text-wrap:balance]"
                >
                  {title}
                </h1>
              </header>
              {
                saveKey && (
                  <div class="hidden xl:block xl:-translate-y-2">
                    <SavePageButton
                      saveKey={saveKey}
                      pageTitle={title}
                      pageDescription={description}
                      className="sm:justify-start"
                    />
                  </div>
                )
              }
            </section>
            <div class="grid grid-cols-1 gap-3 xl:grid-cols-center">
              <div
                class="flex gap-3 justify-between sm:items-start sm:gap-3 relative xl:col-start-3 xl:row-start-1 xl:w-full xl:pointer-events-none"
              >
                {
                  hasHeadings && (
                    <div class="max-w-[65ch] flex-1 xl:contents">
                      <MdToc headings={levelTwoHeadings} />
                    </div>
                  )
                }
                {
                  saveKey && (
                    <div class="fixed z-20 top-0 right-1/3 -translate-y-2 sm:block xl:hidden sm:ml-auto sm:-translate-y-10 sm:absolute sm:right-0 sm:top-0">
                      <SavePageButton
                        saveKey={saveKey}
                        pageTitle={title}
                        pageDescription={description}
                        className="w-full sm:w-auto sm:justify-start"
                      />
                    </div>
                  )
                }
              </div>
              <div
                class={clsx(
                  'Content',
                  'prose max-w-none',
                  'prose-headings:font-techie prose-headings:scroll-mt-20',
                  'prose-a:no-underline prose-a:text-primary-600 prose-a:font-normal prose-a:border-b prose-a:border-dashed prose-a:border-gray-700/50 hover:prose-a:border-solid hover:prose-a:border-primary-500 hover:prose-a:text-primary-700',
                  'prose-a:scroll-mt-20',
                  'prose-code:break-words *:max-w-[65ch]',
                  'xl:max-w-none xl:col-span-full xl:row-start-1 xl:grid xl:grid-cols-center xl:gap-x-3 xl:*:col-start-2'
                )}
                data-md-content
              >
                <slot />
              </div>
            </div>
          </article>
        </div>
        <slot name="content-footer" />
      </div>
    </div>
  </main>
  <Footer />
</div>

<style lang="scss">
  @keyframes twinkle {
    0% {
      opacity: 0%;
    }
    50% {
      opacity: 100%;
    }
    100% {
      opacity: 0%;
    }
  }

  .Content {
    :global(h1:target::before, h2:target::before, h3:target::before, h4:target::before) {
      content: '>';
      color: theme('colors.primary.500');
      position: absolute;
      left: 0;
      transform: translateY(-70%) rotate(90deg);
      animation: twinkle 700ms 3;
      opacity: 0;
    }

    :global(.footnotes li[id]) {
      @apply scroll-mt-20;
    }
  }

  @supports (initial-letter: 2) {
    .Content > :global(p:first-child):first-letter {
      initial-letter: 2;
      @apply font-serif pr-2;
    }
  }

  @media (min-width: theme('screens.md')) {
    .Content {
      :global(h1:target::before, h2:target::before, h3:target::before, h4:target::before) {
        left: -8px;
        transform: translateX(-100%) rotate(0deg);
      }
    }
  }
</style>

<script>
  import { createTooltip } from '~/lib/create-tooltip';
  import { createTwoslashTooltips } from '~/lib/create-twoslash-tooltips';

  const mdContents = document.querySelectorAll('[data-md-content]');

  mdContents.forEach((mdContent) => {
    const footNoteRef = mdContent.querySelectorAll('a[data-footnote-ref]');

    footNoteRef.forEach((el) => {
      const parentSupEl = el.closest('sup');

      if (!parentSupEl) {
        return;
      }

      const href = el.getAttribute('href');
      if (href) {
        const target = document.querySelector(href);
        if (target && target instanceof HTMLElement) {
          const childs: Array<Node> = [];
          target.childNodes.forEach((childNode) => {
            if (childNode instanceof HTMLElement) {
              const cloned = document.createElement('div');
              cloned.innerHTML = childNode.innerHTML;
              cloned.childNodes.forEach((grandChild) => {
                if (
                  grandChild instanceof HTMLElement &&
                  grandChild.hasAttribute('data-footnote-backref')
                ) {
                  grandChild.remove();
                }
              });
              childs.push(cloned);
            }
          });
          if (childs.length > 0) {
            const tooltipEl = document.createElement('div');
            tooltipEl.role = 'tooltip';
            childs.forEach((child) => tooltipEl.appendChild(child));
            const arrowEl = document.createElement('div');
            tooltipEl.appendChild(arrowEl);
            parentSupEl.insertAdjacentElement('afterend', tooltipEl);

            createTooltip({
              anchor: el,
              tooltip: tooltipEl,
              arrow: arrowEl,
              offsetPx: 8,
              minWidthPx: 400,
              placement: 'right-start',
              withStyles: true,
            });
          }
        }
      }
    });

    createTwoslashTooltips(mdContent);
  });
</script>
