---
import type { MarkdownHeading } from 'astro';
import { clsx } from 'clsx';
import { formatDate, isFuture } from '~/lib/date';
import MdToc from './MdToc.astro';
import SavePageButton from './SavePageButton.astro';
import './shiki.css';

export interface Props {
  title: string;
  headings?: Array<MarkdownHeading>;
  publishDate?: Date;
  /** key used for offline saving. Required for supporting save for offline */
  saveKey?: string;
}

const { title, publishDate, headings, saveKey } = Astro.props;

const isFutureContent = publishDate && isFuture(publishDate);

const levelTwoHeadings = headings && headings.filter((h) => h.slug !== 'footnote-label');

const hasHeadings = levelTwoHeadings && levelTwoHeadings.length > 0;
---

<div class="mb-12">
  <article>
    <div class="flex items-end mb-8 sm:pb-8 sm:border-b sm:border-gray-100">
      <header
        class={clsx('relative max-w-3xl w-full', hasHeadings ? 'mx-auto xl:ml-0' : 'mx-auto')}
      >
        {
          publishDate && (
            <p class="my-3 text-zinc-400 pl-4 border-l-4 border-l-zinc-100">
              {isFutureContent ? `To be published on ` : null}
              {formatDate(publishDate)}
            </p>
          )
        }
        <h1 class="content-title text-3xl sm:text-4xl font-bold w-full">
          {title}
        </h1>
      </header>
      {
        saveKey && (
          <div class="hidden xl:block xl:offline:hidden">
            <SavePageButton saveKey={saveKey} pageTitle={title} />
          </div>
        )
      }
    </div>
    <div
      class="flex flex-col mb-3 sm:flex-row justify-between sm:items-start sm:gap-3 sm:mb-6 xl:contents max-w-3xl mx-auto xl:max-w-none xl:mb-0"
    >
      {
        hasHeadings && (
          <div class="flex-1 xl:contents">
            <MdToc headings={levelTwoHeadings} />
          </div>
        )
      }
      {
        saveKey && (
          <div class="py-2 xl:hidden offline:hidden">
            <SavePageButton saveKey={saveKey} pageTitle={title} />
          </div>
        )
      }
    </div>
    <div
      class={clsx('max-w-3xl prose', hasHeadings ? 'mx-auto xl:ml-0' : 'mx-auto')}
      data-md-content
    >
      <slot />
    </div>
  </article>
</div>

<script>
  import { createTooltip } from '~/lib/create-tooltip';

  const mdContents = document.querySelectorAll('[data-md-content]');

  mdContents.forEach((mdContent) => {
    const footNoteRef = mdContent.querySelectorAll('a[data-footnote-ref]');

    footNoteRef.forEach((el) => {
      const parentSupEl = el.closest('sup');

      if (!parentSupEl) {
        return;
      }

      const href = el.getAttribute('href');
      if (href) {
        const target = document.querySelector(href);
        if (target && target instanceof HTMLElement) {
          const childs: Array<Node> = [];
          target.childNodes.forEach((childNode) => {
            if (childNode instanceof HTMLElement) {
              const cloned = document.createElement('div');
              cloned.innerHTML = childNode.innerHTML;
              cloned.childNodes.forEach((grandChild) => {
                if (
                  grandChild instanceof HTMLElement &&
                  grandChild.hasAttribute('data-footnote-backref')
                ) {
                  grandChild.remove();
                }
              });
              childs.push(cloned);
            }
          });
          if (childs.length > 0) {
            const tooltipEl = document.createElement('div');
            tooltipEl.role = 'tooltip';
            childs.forEach((child) => tooltipEl.appendChild(child));
            const arrowEl = document.createElement('div');
            tooltipEl.appendChild(arrowEl);
            parentSupEl.insertAdjacentElement('afterend', tooltipEl);

            createTooltip({
              anchor: el,
              tooltip: tooltipEl,
              arrow: arrowEl,
            });
          }
        }
      }
    });
  });
</script>
